    __     ____ ______ ______ ______ ______ ____ 
   / /    /  _//_  __// ____// ____// ____// __ \
  / /     / /   / /  / /_   / __/  / __/  / / / /
 / /___ _/ /   / /  / __/  / /___ / /___ / /_/ / 
/_____//___/  /_/  /_/    /_____//_____//_____/  



I'm thinking of using dill to store a list containing a dictionary and a list of our feeds.

The dictionary would map feed titles to their respective place in our list. 
This would simplify any of the application's possible searches. Though that may be redundant,

I'll first try to implement this using a normal list.
Like, if I wanted to print a list of the feeds that are currently saved/loaded, I could do say,
execute "list feed" in a CLI, and just print the list of feeds prefixed with a "i. ". Using something
like, (for i in range(0, len(litlist))).

Another thought, I was considering saving the feedparser object created when first accessing the feed.
But I quickly realized that I would only have access to the information available at creation. 
So I'm going to be creating a new feedparser object every time update() is called. Maybe use it such that
the feedparser object is passed as a var so that it isn't saved in dill?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Next stop, Adding dill!

Probably gonna make it work like the first attempt. Checks to see if there's a file present in the main directory.
Otherwise, it makes one upon program exit. 

Make a boolean var titled: saveExists
When starting the program it'll check if there is say, a data.lf in the main directory. 
If there isn't, then make saveExists false. 
If there is, make it true. 

Then use this to dictate whether or not we make a new file as the user closes the application. 

Also change of plans, I'm going to have the user input the title of any RSS feeds as opposed to relying on
the feed's title. This is because I immediately ran into the issue of feeds having a generic name (e.g. mangadex rss)

General Class info
~~~~~~~~~~~~~~~~~~~

Private Variables: 
	Title
	Last Updated
	List Chapters/Entry titles 
	List URLs

Methods:
	retTitle() - returns the feed's title
	retLink (int n) - URL of the nth entry
	retEntries() | Entries(n) - Returns the top 10 entries if no input, entries starting from length(entries) - 10 * n, to the next 10 * n-1
	updateTitle(str x) - updates the feed title
	updateURL(str x) - updates the URL feed
	fetchEntries() - retrieves information about our entries. Titles, Descriptions (later), and URLs.
	Update() - checks feed for updates. May just use fetchEntries for this. Or could try to optimize it in that
	it'll only do the work necessary.

